document.addEventListener('DOMContentLoaded', () => {
    const emojiButton = document.querySelector('#emojiButton');
    const emojiPicker = document.querySelector('#emojiPicker');
    const messageInput = document.querySelector('#message');

    // Liste d'emojis (visages et nourriture)
    const emojis = [
        // Emojis de visages
        'üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä',
        'üòã', 'üòé', 'üòç', 'üòò', 'ü•∞', 'üòó', 'üòô', 'üòö', 'üôÇ', 'ü§ó',
        'ü§©', 'ü§î', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üôÑ', 'üòè', 'üò£', 'üò•',
        'üòÆ', 'ü§ê', 'üòØ', 'üò™', 'üò´', 'ü•±', 'üò¥', 'üòå', 'üòõ', 'üòú',
        'üòù', 'ü§§', 'üòí', 'üòì', 'üòî', 'üòï', 'üôÉ', 'ü´†', 'ü§ë', 'üò≤',
        '‚òπÔ∏è', 'üôÅ', 'üòñ', 'üòû', 'üòü', 'üò§', 'üò¢', 'üò≠', 'üò¶', 'üòß',
        'üò®', 'üò©', 'ü§Ø', 'üò¨', 'üò∞', 'üò±', 'ü•µ', 'ü•∂', 'üò≥', 'ü§™',
        'üòµ', 'ü§ï', 'ü§í', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§†', 'ü•≥', 'ü•∏', 'üòé',

        // Emojis de nourriture
        'üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê',
        'ü•ù', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ë', 'üçÖ', 'üçÜ', 'ü•î',
        'ü•ï', 'üåΩ', 'üå∂Ô∏è', 'ü´ë', 'ü•í', 'ü•¨', 'ü•¶', 'üßÑ', 'üßÖ', 'üçÑ',
        'ü•ú', 'üå∞', 'üçû', 'ü•ê', 'ü•ñ', 'ü•®', 'ü•Ø', 'ü´ì', 'ü•û', 'üßá',
        'üßÄ', 'üçñ', 'üçó', 'ü•©', 'ü•ì', 'üçî', 'üçü', 'üçï', 'üå≠', 'ü•™',
        'üåÆ', 'üåØ', 'ü´î', 'ü•ô', 'üßÜ', 'ü•ó', 'ü•ò', 'ü´ï', 'üçù', 'üçú',
        'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'üç§', 'üçö', 'üç•', 'ü•Æ', 'üç°',
        'ü•†', 'üßÅ', 'üç∞', 'üéÇ', 'üçÆ', 'üç¨', 'üç≠', 'üç´', 'üçø', 'üç©',
        'üç™', 'üå∞', 'ü•õ', 'üçº', '‚òï', 'üçµ', 'ü´ñ', 'ü•§', 'üßÉ', 'üç∂',
        'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üßâ', 'üßä', 'ü•Ñ',
    ];

    // G√©n√©rer les spans d'emojis dans le picker
    emojis.forEach(emoji => {
        const span = document.createElement('span');
        span.className = 'emoji-item';
        span.innerText = emoji;
        emojiPicker.appendChild(span);
    });

    // Afficher/Masquer le picker avec ajustement de position
    emojiButton.addEventListener('click', (event) => {
        event.preventDefault(); // Emp√™che le comportement par d√©faut si n√©cessaire

        // Calculer la position du bouton emoji
        const rect = emojiButton.getBoundingClientRect();

        // Position par d√©faut (sous le bouton emoji)
        let top = rect.bottom + window.scrollY + 5; // Ajouter un petit espace
        let left = rect.left + window.scrollX;

        // Ajuster si le picker d√©passe √† droite
        const pickerWidth = emojiPicker.offsetWidth || 300; // Largeur estim√©e
        if (left + pickerWidth > window.innerWidth) {
            left = window.innerWidth - pickerWidth - 10; // 10px de marge
        }

        // Ajuster si le picker d√©passe en bas
        const pickerHeight = emojiPicker.offsetHeight || 300; // Hauteur estim√©e
        if (top + pickerHeight > window.innerHeight + window.scrollY) {
            top = rect.top + window.scrollY - pickerHeight - 5; // Placer au-dessus du bouton
        }

        emojiPicker.style.top = `${top}px`;
        emojiPicker.style.left = `${left}px`;

        // Afficher/Masquer le picker
        emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
    });

    // Ajouter l'emoji s√©lectionn√© au champ texte
    emojiPicker.addEventListener('click', (event) => {
        if (event.target.classList.contains('emoji-item')) {
            messageInput.value += event.target.innerText;
            emojiPicker.style.display = 'none'; // Fermer le picker apr√®s s√©lection
        }
    });

    // Cacher le picker si on clique en dehors
    document.addEventListener('click', (event) => {
        if (!emojiPicker.contains(event.target) && event.target !== emojiButton) {
            emojiPicker.style.display = 'none';
        }
    });

    document.addEventListener('input', function(e) {
        if (e.target.tagName === 'TEXTAREA') {
            const textarea = e.target;
            textarea.style.height = 'auto'; // R√©initialise la hauteur pour recalculer
            textarea.style.height = textarea.scrollHeight + 'px'; // Ajuste √† la hauteur du contenu
        }
    });

    document.getElementById('fileInput').addEventListener('change', function(event) {
        const files = event.target.files; // R√©cup√®re les fichiers s√©lectionn√©s
        const previewContainer = document.getElementById('imagePreviewContainer');

        // Supprime les anciens aper√ßus en supprimant directement les enfants
        while (previewContainer.firstChild) {
            previewContainer.removeChild(previewContainer.firstChild);
        }

        // Parcourir chaque fichier s√©lectionn√©
        Array.from(files).forEach(file => {
            if (file.type.startsWith('image/')) { // V√©rifie si le fichier est une image
                const reader = new FileReader();

                // √âv√©nement de chargement du fichier
                reader.onload = function(e) {
                    const img = document.createElement('img'); // Cr√©e un √©l√©ment image
                    img.src = e.target.result; // Utilise le contenu de l'image
                    previewContainer.appendChild(img); // Ajoute l'image dans le conteneur d'aper√ßu
                };

                reader.readAsDataURL(file); // Lit le contenu de l'image
            }
        });
    });    
});
